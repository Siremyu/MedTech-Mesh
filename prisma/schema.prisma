generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique
  username      String? @unique
  displayName   String?
  password      String?
  avatarUrl     String?
  bio           String?
  region        String?
  gender        String?
  emailVerified Boolean @default(false) // Ensure this is Boolean, not DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  models      Model[]
  likes       ModelLike[]
  downloads   ModelDownload[]
  accounts    Account[]
  sessions    Session[]
  collections Collection[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Model {
  id              String    @id @default(cuid())
  title           String
  description     String?
  category        String
  tags            String[]
  coverImageUrl   String?
  modelFileUrl    String?
  galleryImages   String[]
  status          String    @default("published") // published, verification, rejected
  visibility      String    @default("public") // public, private
  nsfwContent     Boolean   @default(false)
  license         String? // JSON string
  likes           Int       @default(0)
  downloads       Int       @default(0)
  views           Int       @default(0)
  authorId        String
  publishedAt     DateTime?
  rejectionReason String?
  adminNotes      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  modelLikes     ModelLike[]
  modelDownloads ModelDownload[]

  @@map("models")
}

model ModelLike {
  id        String   @id @default(cuid())
  userId    String
  modelId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([userId, modelId])
  @@map("model_likes")
}

model ModelDownload {
  id        String   @id @default(cuid())
  userId    String
  modelId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("model_downloads")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Collection {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}
