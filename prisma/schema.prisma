generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  username       String? @unique
  displayName    String?
  password       String?
  avatarUrl      String?
  avatarPublicId String? // Add this for Cloudinary
  bio            String?
  region         String?
  gender         String?
  emailVerified  Boolean @default(false) // Ensure this is Boolean, not DateTime
  role           Role    @default(USER) // Add this line

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  models      Model[]
  likes       Like[]
  downloads   Download[]
  accounts    Account[]
  sessions    Session[]
  collections Collection[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Model {
  id              String    @id @default(cuid())
  title           String
  description     String?
  category        String
  tags            String[]
  coverImageUrl   String?
  modelFileUrl    String?
  galleryImages   String[]
  status          String    @default("verification") // "verification", "published", "rejected"
  visibility      String    @default("public") // public, private
  nsfwContent     Boolean   @default(false)
  license         String? // JSON string
  communityPost   Boolean   @default(true)
  authorId        String
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes           Int       @default(0)
  downloads       Int       @default(0)
  views           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime?
  rejectionReason String?
  adminNotes      String?
  reviewedBy      String? // ID of admin who reviewed
  reviewedAt      DateTime?

  // Relations
  likes_rel     Like[]
  downloads_rel Download[]

  @@map("models")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  modelId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([userId, modelId])
  @@map("likes")
}

model Download {
  id        String   @id @default(cuid())
  userId    String
  modelId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  model Model @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("downloads")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Collection {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
